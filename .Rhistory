##assign class to rows based on class with max probablity
for ( i in 1:nrow(y.test.pred)) {
col = which.max(y.test.pred[i,])
y.test.pred.class[i,6] = as.character(row.names(as.data.frame(col)))
y.test.pred.class[i,7] = as.numeric(y.test.pred[i,col])
}
head(y.test.pred.class)
##predict probablities for classes for test set based from training
y.test.pred = as.data.frame(
predict( object = y.train.rf, newdata = y.test.dfg, type = "prob"))
y.test.pred.class = y.test.pred ; head(y.test.pred.class)
##assign class to rows based on class with max probablity
for ( i in 1:nrow(y.test.pred)) {
col = which.max(y.test.pred[i,])
y.test.pred.class[i,6] = as.character(row.names(as.data.frame(col)))
y.test.pred.class[i,7] = as.numeric(y.test.pred[i,col])
}
colnames(y.test.pred.class) = c(y.test.pred, "Class", "Probility") ; head(y.test.pred.class)
y.test.pred.class[,1:5] = NULL ; head(y.test.pred.class)
colnames(y.test.pred.class) = c(y.test.pred, "Class", "Probility") ; head(y.test.pred.class)
##predict probablities for classes for test set based from training
y.test.pred = as.data.frame(
predict( object = y.train.rf, newdata = y.test.dfg, type = "prob"))
y.test.pred.class = y.test.pred ; head(y.test.pred.class)
##assign class to rows based on class with max probablity
for ( i in 1:nrow(y.test.pred)) {
col = which.max(y.test.pred[i,])
y.test.pred.class[i,6] = as.character(row.names(as.data.frame(col)))
y.test.pred.class[i,7] = as.numeric(y.test.pred[i,col])
}
colnames(y.test.pred.class) = c(colnames(y.test.pred), "Class", "Probility")
head(y.test.pred.class)
y.test.pred.class[,1:5] = NULL ; head(y.test.pred.class)
y.predicted.class = merge(y.test.pred.class, y, by="row.names")
head(y.test.dfg.pred)
y.predicted.class = merge(y.predicted.class, y.test.dfg.pred, by = "Row.names")
head(y.predicted.class)
head(y.test.dfg.pred)
head(y.predicted.class)
y.predicted.class = merge(y.test.pred.class, y, by="row.names")
head(y.predicted.class)
y.predicted.class = merge(y.test.pred.class, y.test, by="row.names")
head(y.predicted.class)
head(y.predicted.class) ; nrow(y.predicted.class)
head(y.test.dfg.pred)
y.predicted.class = merge(y.predicted.class, y.test.dfg.pred, by = "Row.names")
head(y.predicted.class)
head(y.predicted.class)
colnames(y.predicted.class)[1] = 'pdb_id'
head(y.predicted.class)
View(y.predicted.class)
library(tidyverse)
library(randomForest)
library(plotly)
library(clusterSim)
library(dplyr)
set.seed(10)
setwd('/Users/pmung/Dropbox (Schlessinger lab)/9_scripts/3_program/structures/4_Konformation')
dat = read.table("z_database/stdy_kinase.param.171009.csv",header =T, sep ="," )
head(dat)
##get relevant columns
dat_rel_col = dat[,c(1,4,6,7,8,9,10,12,13,14,15)]
head(dat_rel_col)
##partition and format test/training data
training = dat_rel_col[c(1,3:326),] ## row 1 is duplcate of row 2
row.names(training) = training$pdb_id; head(training)
training_class = as.factor(as.character(training$Group))
training_dfg   = as.factor(training$dfg_st)
training[,c(1,2,10)] = NULL  # raw data
head(training)
test = dat_rel_col[327:nrow(dat_rel_col),]
row.names(test) = test$pdb_id; head(test)
test[,c(1,2,10)] = NULL; head(test)
##remove row with NA lose about 139 cases
test_complete = test[complete.cases(test),]
head(test_complete)
##impute missing training data using c-helix class
#training.impute = rfImpute(x = training, y = training.class ,   ntree = 1000)
#training.impute$training.class = NULL
##normalize data to 0
combined_data = as.data.frame(rbind(training, test_complete))
combined_n = combined_data
combined_part = combined_data[c(4,5,6,7)]; nrow(combined_part)
#cb_mean = apply(combined_part, 2, mean); cb_mean
#cb_max  = as.data.frame(Map(maxFunc, combined_part, cb_mean)); cb_max
cb_mean = as.data.frame(lapply(apply(combined_part, 2, mean), rep, nrow(combined_part)))
head(cb_mean)
maxFunc = function(var, cb_mean) {  return(max(abs(var - cb_mean)))  }
cb_max  = (Map(maxFunc, combined_part, cb_mean)); head(cb_max)
cb_max  = as.data.frame(lapply(cb_max, rep, nrow(combined_part)))
head(cb_mean); head(cb_max)
normFunc = function(var, cb_mean, cb_max) { return( (var - cb_mean) / cb_max ) }
temp = as.data.frame(Map(normFunc, combined_part, cb_mean, cb_max)); head(temp)
combined_n[c('ang_NHs','ang_CHs','dist_NH','dist_CH')] = temp
head(combined_n)
training_n = combined_n[1:325,]
test_n = combined_n[326:nrow(combined_n),]
head(test_n)
##fix dfg stat values
training_dfg_2 = c()
for (i in 1:length(training_class)) {
if (training_class[i] == "other")  {
training_dfg_2[i] = 3  }
else  {
g = substr(training_class[i], 3, 5 )
if (g == "di") {
training_dfg_2[i] = 1 }
else {
training_dfg_2[i] = 0 }  }
}
training_dfg_2 = as.factor(training_dfg_2); head(training_dfg_2)
###train DFG classifier
dfg_rf = function(training_n) {
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000)
return(training_dfg_rf)}
x = replicate(1, dfg_rf(training_n))
x[1]
install.packages(c("bsplus", "DT", "rcdk", "shinyBS", "shinycssloaders", "shinythemes", "shinyWidgets"))
x[1][4]
x[[1]][4]
x[[1]][4:1]
x[[1]][4:5]
x[[1]]
###train DFG classifier
dfg_rf = function(training_n) {
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000)
return(training_dfg_rf)}
x = replicate(3, dfg_rf(training_n))
x[[1]]
x[4]
x[[1]][4]
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000)
plot(training_dfg_rf$err.rate[,1], type='l')
plot(training_dfg_rf$err.rate[,1])
training_dfg_rf$err.rate
training_dfg_rf$err.rate[1]
training_dfg_rf$err.rate[,1]
plot(training_dfg_rf$err.rate[,1])
plot(training_dfg_rf[1]$err.rate[,1])
plot(1:1000,training_dfg_rf$err.rate[,1])
training_dfg_rf$err.rate[,1]
training_dfg_rf$err.rate[1]
training_dfg_rf$err.rate[2]
training_dfg_rf$err.rate[3]
training_dfg_rf$err.rate
plot(1:1000,training_dfg_rf$err.rate)
plot(training_dfg_rf$err.rate)
nrow(training_dfg_rf$err.rate)
plot(1:1000,training_dfg_rf$err.rate[,1])
nrow(training_dfg_rf$err.rate[,1])
(training_dfg_rf$err.rate[,1])
training_dfg_rf$confusion
training_dfg_rf$oob.times
training_dfg_rf$ntree
training_dfg_rf$err.rate
training_dfg_rf$err.rate[,1]
training_dfg_rf$importance
training_dfg_rf$importanceSD
training_dfg_rf$predicted
training_dfg_rf$call
training_dfg_rf$terms
training_dfg_rf$inbag
training_dfg_rf$oob.times
training_dfg_rf
##train Chelix classifer
training_n_dfg = training_n
training_n_dfg$dfg = training_dfg_2 ##add dfg data to data
head(training_n_dfg)
training_n_dfg$dfg = as.numeric(as.character(training_n_dfg$dfg )); head(training_n_dfg)
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg,
ntree = 1000);
training_chelix_rf$confusion
training_chelix_rf$importance
training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg(,c(3:ncol(training_n_dfg))),
ntree = 1000);
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg(,c(3:ncols(training_n_dfg))),
ntree = 1000);
ncol(training_n_dfg)
training_n_dfg[,c(3:9)]
head(training_n_dfg[,c(3:9)])
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg(,c(3,ncol(training_n_dfg))),
ntree = 1000);
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3,ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf$confusion
training_chelix_rf$importance
training_chelix_rf
training_chelix_rf$confusion
training_chelix_rf$importance
head(training_n_dfg[,c(3:9)])
head(training_n_dfg[,c(3,9)])
head(training_n_dfg[,c(3:9)])
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf$confusion
training_chelix_rf$importance
training_chelix_rf
head(training_n_dfg[,c(3:7,9)])
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf$confusion
training_chelix_rf$importance
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf$confusion
training_chelix_rf$importance
training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf
training_chelix_rf$importance
save(file = "chelixmod.rda", training_chelix_rf )
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000)
training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~., data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 2500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 2500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 2500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 2500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 500); training_chelix_rf
training_chelix_rf = load('chelixmod.rda'); training_chelix_rf
training_chelix_rf
training_chelix_rf$confusion
training_chelix_rf$importance
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
save(file = "chelixmod.rda", training_chelix_rf )
training_chelix_rf = load('chelixmod.rda')
training_chelix_rf$importance
training_chelix_rf
xxx = load('chelixmod.rda')
xxx
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
save(training_chelix_rf, file = "chelixmod.rda")
save(training_dfg_rf, file = "dfgmod.rda")
xxx = load('chelixmod.rda')
xxx
yyy = load('dfgmod.rda')
yyy
print(yyy)
yyy = get(load('dfgmod.rda'))
print(yyy)
xxx = get(load('chelixmod.rda'))
print(xxx)
training_chelix_rf$importance
###train DFG classifier
head(training_n)
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000)
training_dfg_rf$confusion
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf$importance
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,9)],
ntree = 1000); training_dfg_rf
###train DFG classifier
head(training_n)
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1:7)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1:7)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1:7)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1:7)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1:7)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1:7)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n,
ntree = 1000); training_dfg_rf
training_dfg_rf$importance
yyy = get(load('dfgmod.rda'))
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf$importance
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(1:ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(1:ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(1:ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(1:ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(1:ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf$importance
training_chelix_rf = randomForest( training_class ~.,
data=training_n_dfg[c(3:7,ncol(training_n_dfg))],
ntree = 1000); training_chelix_rf
training_chelix_rf$importance
###train DFG classifier, include r3r3x data
head(training_n[c(1,2,8)])
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
###train DFG classifier, include r3r3x data
head(training_n[c(1,2,6:8)])
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,5:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,5:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,5:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,5:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,5:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,4:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,4:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,4:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,4:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,7:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,7:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,7:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,7:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,7:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,7:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf$importance
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,3,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf = randomForest( training_dfg_2 ~., data=training_n[c(1,2,6:8)],
ntree = 1000); training_dfg_rf
training_dfg_rf$importance
head(training_n_dfg[,c(3:7,9)])
head(cb_mean)
