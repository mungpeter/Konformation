#!/usr/bin/python

import re,os,glob,sys
import numpy as np
from x_helix_axis  import *
from CommonUtility import *
from aa_residue import AA
from Bio import SeqIO
from Bio.PDB.PDBParser import PDBParser
from Bio.PDB.Polypeptide import PPBuilder
p = PDBParser(PERMISSIVE=1)

##########################################################################
class ParsePDB(object):
  def __init__( self, h_seq=[], n_seq=[], c_seq=[],
                      h_res='', n_res='', c_res='',
                      pdb_dir='', corr={}   ):
    self.h_seq   = h_seq
    self.n_seq   = n_seq
    self.c_seq   = c_seq
    self.h_res   = h_res
    self.n_res   = n_res
    self.c_res   = c_res
    self.pdb_dir = pdb_dir
    self.corr    = corr

  def __call__(self, inp):
    return self.extract_pdb(inp)

########################################################
  def extract_pdb( self, inp ):

    with open('_TEMP.'+inp, 'wh') as missing:
      pdb_name = inp.split('.')[0]
      print('>>> Current PDB: '+pdb_name)

      # Skip if protein is not found in fasta library or sequence has blank 
      # residue '-' in the sequence
      if pdb_name not in self.h_seq:
        print('#*#* {0} is not in FASTA library.'.format(pdb_name))
        return None
      if CheckSequence( self.h_seq[pdb_name] ) is False:
        print('** {0} has missing residue: {1}. Ignored **'.format(
              pdb_name, str(self.h_seq[pdb_name]) ))
        return None

      pdb_path = glob.glob('{0}/{1}'.format(self.pdb_dir, inp.rstrip()))[0]
      pdb_obj  = p.get_structure(pdb_name, pdb_path)
      H_Crds = ExtractPDBCoords( pdb_obj, self.h_seq[pdb_name] )
      N_Crds = ExtractPDBCoords( pdb_obj, self.n_seq[pdb_name] )
      C_Crds = ExtractPDBCoords( pdb_obj, self.c_seq[pdb_name] )

      # If the coordinates collection failed in the previous step, check
      # if correction data for failed residues is available for replacement,
      # otherwise output as None and ignore this PDB in future calculations
      # and marked as missing in an output file
      if H_Crds is None:
        if pdb_name in self.corr:
          H_Crds = self.corr[pdb_name][0]
          print('# Accepted coordinates correction: '+pdb_name+' Helix')
        else:
          missing.write(inp+'|Helix|'+''.join(self.h_seq[pdb_name])+'\n')
          return None
      if N_Crds is None:
        if pdb_name in self.corr:
          N_Crds = self.corr[pdb_name][1]
          print('# Accepted coordinates correction: '+pdb_name+' N_dom')
        else:
          missing.write(inp+'|N_dom|'+''.join(self.c_seq[pdb_name])+'\n')
          return None
      if C_Crds is None:
        if pdb_name in self.corr:
          C_Crds = self.corr[pdb_name][2]
          print('# Accepted coordinates correction: '+pdb_name+' C_dom')
        else:
          missing.write(inp+'|C_dom|'+''.join(self.c_seq[pdb_name])+'\n')
          return None

      return [pdb_name, H_Crds, N_Crds, C_Crds]


##########################################################################
## Optional file contain correction for PDBs that have missing residues in
## the sequence matching region. Run thru the program first to identify
## which PDB has what missing. The correction residues should be in N-CA-C 
## order and center on the key residues only
##   Format of corrected file: correct.<PDB file> -->correct.1ATP_E.1atp.pdb
def CoordCorrect( option, pdb_dir ):

  dic = {}
  if option is None:
    return dic

  with open(option, 'r') as fi:
    for l in fi:
      pdb_file, typ, seq = l.split('|')
      pdb_name = pdb_file.split('.')[0]

      try:
        pdb_path = glob.glob('{0}/correct.{1}'.format(pdb_dir, pdb_file))[0]
      except IndexError:
        print('# No correction for '+pdb_name)
        continue
      px       = p.get_structure(pdb_name, pdb_path)
      res_obj  = px.get_residues()

      Residue = []
      for idx, res in enumerate(res_obj):
        resname = res.get_resname()
        resid   = res.get_id()[1]
        bb_coords = []
        if res.has_id('N'):  bb_coords.append(res['N'].get_coord())
        if res.has_id('CA'): bb_coords.append(res['CA'].get_coord())
        if res.has_id('C'):  bb_coords.append(res['C'].get_coord())

        try:
          ca_coord, sc_vector = SideChainVector(res)
        except KeyError:
          ca_coord, sc_vector = res['CA'].get_coord(), None
        Residue.append([resname, resid, bb_coords, ca_coord, sc_vector])

      # Put Helix, N-Dom, C-Dom data into separated arrays 1,2,3
      if pdb_name not in dic:
        dic[pdb_name] = [None, None, None]

      if   typ == 'Helix':
        dic[pdb_name][0] = Residue
      elif typ == 'N_dom':
        dic[pdb_name][1] = Residue
      elif typ == 'C_dom':
        dic[pdb_name][2] = Residue

  return dic


##########################################################################
##########################################################################
## Use MPI to run calculation of spherical angle and distance calculations 
## for H-helix, N-domain, and C-domain. Results are exported into files
def DomainDistances( Ref_Coords, PDB_Coords, output ):

  # Create distance object for MPI
  mpi = multiprocessing.Pool(processes = multiprocessing.cpu_count())
  Ref = CalculateDist(Ref_Coords)
  Tmp = mpi.map(CalculateDist, PDB_Coords)
  mpi.close()
  mpi.join()

  Tgt_List = [x for x in Tmp if x is not None]
  ExportDistMeasure(Ref, Tgt_List, output)


##########################################################################
## Calculate C-helix-domains parameters. For each element, use the center
## residue in the array. Since input is odd number and 3 atoms for each 
## residue, array center be should 'CA' of center residue
## e.g.>  HTLN|E|KRIL
def CalculateDist( Coords ):

  # Restack the coordinates data
  try:
    H_Coords = sum(zip(*Coords[1])[2], [])
  except TypeError:
    print Coords[0]
  H_Coords = sum(zip(*Coords[1])[2], [])
  N_Coords = sum(zip(*Coords[2])[2], [])
  C_Coords = sum(zip(*Coords[3])[2], [])

  H_pt = H_Coords[ArrayCent(len(H_Coords))]
  N_pt = N_Coords[ArrayCent(len(N_Coords))]
  C_pt = C_Coords[ArrayCent(len(C_Coords))]

  # Calculate spherical angles from N/C-domain to origin
  # Calculate distance distance between N/C-domains to center of C-helix
  n_phi, n_psi = SphericalAngles(N_pt)
  c_phi, c_psi = SphericalAngles(C_pt)
  dist_N_H = Distance(H_pt, N_pt)
  dist_C_H = Distance(H_pt, C_pt)
  dist_N_C = Distance(N_pt, C_pt)

  return [ Coords[0], n_phi, n_psi, c_phi, c_psi,
                      dist_N_H, dist_N_C, dist_C_H ]


##########################################################################
## Export spherical angle and distance results into files
def ExportDistMeasure( Ref, Tgt_List, output ):
# [ Coords[0], n_phi, n_psi, c_phi, c_psi, dist_N_H, dist_N_C, dist_C_H ]

  angl = open(output+'.dom-angle.txt', 'w')
  angl.write('## Spherical Angle of N-dom, C-dom\n')
  angl.write('## Reference {0} N(Phi:Psi) = {1:6.2f} - {2:6.2f} \n'.format(
             Ref[0], Ref[1], Ref[2] ))
  angl.write('## Reference {0} C(Phi:Psi) = {1:6.2f} - {2:6.2f} \n'.format(
             Ref[0], Ref[3], Ref[4] ))

  dist = open(output+'.dom-dist.txt', 'w')
  dist.write('## Dist between N-dom_C-heix, C-dom_C-helix, N-dom_C-dom\n')
  dist.write('## Reference {0} N-H: {1:6.2f}  N-C: {2:6.2f}  C-H: {3:6.2f}\n'.format(        Ref[0], Ref[5], Ref[6], Ref[7] ))

  for Tgt in Tgt_List:
    angl.write('{0} d-N(Phi:Psi) = {1:6.2f} - {2:6.2f}\n'.format( Tgt[0],
           Ref[1]-Tgt[1], Ref[2]-Tgt[2]))
    angl.write('{0} d-C(Phi:Psi) = {1:6.2f} - {2:6.2f}\n'.format( Tgt[0],
           Ref[3]-Tgt[3], Ref[4]-Tgt[4]))

    dist.write('{0} d-N(N-H:N-C) = {1:6.2f} - {2:6.2f}\n'.format( Tgt[0],
           Ref[5]-Tgt[5], Ref[6]-Tgt[6]))
    dist.write('{0} d-C(C-H:C-N) = {1:6.2f} - {2:6.2f}\n'.format( Tgt[0],
           Ref[7]-Tgt[7], Ref[6]-Tgt[6]))

  angl.close()
  dist.close()


##########################################################################
## From the input Biopython PDB Object, extract the coordinates and info of
## 'res_num' rsidues corresponding to the supplied 'Query Sequence'
def ExtractPDBCoords( PDB, Query_Seq ):

  res_num = len(Query_Seq)
  pdb_id  = PDB.get_id()
  Res_Obj = PDB.get_residues()
  print('>> Query Sequence:\t{0} -\t{1}'.format(pdb_id, ''.join(Query_Seq)))

  ## Convert BioPython Residue Object into List of Residues
  Residues = []
  for idx, res in enumerate(Res_Obj):
    if re.search(r"H_|W", res.get_id()[0]): continue

    resname   = res.get_resname()
    resid     = res.get_id()[1]
    bb_coords = []
    # Get the backbone C-alpha coordinates
    if res.has_id('N'):  bb_coords.append(res['N'].get_coord())
    if res.has_id('CA'): bb_coords.append(res['CA'].get_coord())
    if res.has_id('C'):  bb_coords.append(res['C'].get_coord())

    # Get the sidechain vector by averaging the sidechain coordinates and 
    # calculate the vector from C-alpha to the average coordinates
    try:
      ca_coord, sc_vector = SideChainVector(res)
    except KeyError:
#      print 'vector error '+pdb_id+' '+resname+str(resid)
      ca_coord, sc_vector = None, None


#    print('{0} {1} {2} {3} {4}'.format(idx,resname,resid,ca_coord,sc_vector))
    Residues.append([resname, resid, bb_coords, ca_coord, sc_vector])

  # Convert the target sequence into 3-letter AA name. Number of residue
  # depends on the input sequence length (variable)
  Target_Seq = [AA(Query_Seq[i]) for i in range(0, res_num)]

  ##############################3
  while ( len(Target_Seq) >= 5 ):
    res_num = len(Target_Seq)
    # Iterate through the entire protein sequence and match the sequence to
    # the entire target sequence AA in 'Target_Seq' (vary in length)
    Found, matched = [], False
    for idx, residue in enumerate(Residues):
      # If the current position is reaching the end of the sequence and
      # only 'res_num' residue away, meaning won't have the exact  matching
      # to the 'Target_Seq', break the search
      if (idx + res_num-1) >= len(Residues):
        break

      Found = []
      # If found a match, check the next residue for next in 'Target_Seq'
      # until matching all 'Target_Seq'
      for step in range(0, res_num):
        if Residues[idx+step][0] == Target_Seq[step]:
          Found.append(Residues[idx+step])
#          print Residues[idx+step][0]+str(Residues[idx+step][1])
        else:
          break   # If no matching, break search and step to next residue

      if len(Found) == res_num:
        matched = True
        break
      else:
        continue

    # If no matching sequence is found after moving thru the entire protein,
    # run it one more time with truncation of 1 residue on both ends
    # if failed after rerun with 5 total residues, return None
    if matched is False:
      Trunc_Seq  = Target_Seq[1:-1]
      Target_Seq = Trunc_Seq
      if len(Target_Seq) <= 3:
        print('## Cannot find in\t{0}'.format(pdb_id))
        return None
      else:
        print('## Cannot find match in {0}. Shortened to {1}'.format(
               pdb_id, len(Target_Seq) ) )
    else:
      print(' Matched sequence in\t{0} -\t{1}-{3}-{2}'.format(
             pdb_id, Found[0][1], Found[-1][1],
             ''.join([AA(Found[i][0]) for i in range(0,len(Found))])  ) )
      return Found


##########################################################################
## Calculate the normalized CA-to-(sidechain average) vector
def SideChainVector(res):
  ca_coord  = res['CA'].get_coord()
  sc_coords = []
  for atom in res:
    # ignore mainchain atoms
    if atom.get_name() != 'C':
      if not re.search(r'CA|N|O', atom.get_name()):
        sc_coords.append(res[atom.get_name()].get_coord())

  # Generate normal vector for sidechain
  if len(sc_coords) > 0:    # if not Glycine
#    avg_coord = [sum(atom) / len(atom) for atom in zip(*sc_coords)] 
    avg_coord = np.mean(sc_coords, axis=0)
    sc_vector = np.asarray(avg_coord-ca_coord)/VectorMag(avg_coord-ca_coord)
  else:
    sc_vector = None

  return ca_coord, sc_vector


##########################################################################
## Check sequence if there is empty space ' ' or '-'
def CheckSequence(Seq):
  for res in Seq:
    if res == '-' or res == ' ':
      return False
  return True

##########################################################################
## Get the sequence from the reference PDB file
def RefFastaColumn(Fasta_Lib, residues, name):

  seq, Set = '', {}
  for seq_record in Fasta_Lib:
    if re.search(r'{0}'.format(name), seq_record.id.replace(':','_')):
      seq = str(seq_record.seq)

  # Find the sequence by the 5/7-resid code in (D-2,D-1,D,D+1,D+2) format
  # but refer the column by the center residue 'D'
  Match  = re.finditer(r'{0}'.format(residues), seq)
  for m in Match:
    column = m.start(0)
  Set[name.split('.')[0]] = list(residues)
  print(' reference sequence:\t'+residues)
  print(' Column in Fasta:\t'+str(column+1))  # convert from 'start 0' to 1
  return Set, column


##########################################################################
## Read from alignment FASTA. Find the position of the search pattern in the 
## sequence and make a new sequence, with the residue before the input sequence
## plus the first two residues in the input sequence.
## ** Make sure no 'blank' residue in fasta library in that region
def FastaFromColumn(Fasta_Lib, column, res_num):
  Set    = {}
  for seq_record in Fasta_Lib:
    # Since all query sequences are aligned, the column numbers should 
    # correspond to the correct helix in query sequences
    seq    = str(seq_record.seq)
    Qu_Seq = [seq[column+i] for i in range(0, res_num)]
    pdb_id = seq_record.id.split('|')[0]
    Set[pdb_id.replace(':','_')] = Qu_Seq
  return Set


#########################################################################
#
#   Peter M.U. Ung  @ MSSM
#   
#   v0.1    17.01.09
#   v0.2    17.01.28

#   v1.0    17.01.29
#
