#!/usr/bin/python


import re,os,glob,sys
import numpy as np
from aa_residue    import *
from x_helix_axis  import *
from CommonUtility import *
import multiprocessing
from Bio import SeqIO
from Bio.PDB.PDBParser import PDBParser
from Bio.PDB.Polypeptide import PPBuilder
p = PDBParser(PERMISSIVE=1)
np.seterr(invalid='ignore')

##########################################################################
##
def DFGTorsionAngles( Ref_Coords, Tgt_Coords, output ):

  # Input_Coords = [pdb_name, H_Coords, N_Coords, C_Coords]
  #     x_Coords = [resname, resid, bb_coords, ca_coord, cg_coord, 
  #                 sc_vector]  

  # Create DFG object for MPI
  mpi = multiprocessing.Pool(processes = multiprocessing.cpu_count())
  Ref = DFGTorsions(Ref_Coords)
  Tmp = mpi.map(DFGTorsions, Tgt_Coords)
  mpi.close()
  mpi.join()

  # Tmp = []
  Tgt_List = [x for x in Tmp if x is not None]
  print(' ## DFG-motif Vector return: {0}'.format(len(Tgt_List)))
  ExportDFGMeasure(Ref, Tgt_List, output)


##########################################################################
##
def ExportDFGMeasure( Ref, Tgt_List, output ):

  ## Compare template and model DFG-motif cross-product vectors
  fo = open(output+'.dfg_vec.txt', 'w')
  fo.write('#<DFG> PDB_h | Resi  | p1.p1x | p2.p2x | DFG-type\n')

  # Reference DFG parameters
  pdb_id_x, resi_id_x, p1x, p2x = Ref
  state = DFGState( np.vdot(p1x,p1x), np.vdot(p2x,p2x) )
  Ref_Ref = [pdb_id_x, resi_id_x, np.vdot(p1x,p1x), np.vdot(p2x,p2x), state]

  Tgt_Tmp = []
  for Tgt in Tgt_List:
    pdb_id, resi_id, p1, p2 = Tgt
    if p1 is None or p2 is None:
      p1p1x, p2p2x = None, None
    else:
      p1p1x = np.vdot(p1, p1x)
      p2p2x = np.vdot(p2, p2x)
    state = DFGState(p1p1x, p2p2x)
    Tgt_Tmp.append([pdb_id, resi_id, p1p1x, p2p2x, state])
  Tgt_Inp = sorted(Tgt_Tmp, key=lambda x: (x[4], x[0]))

  All_Data = [Ref_Ref]
  All_Data.extend(Tgt_Inp)  
  # Add Ref to the target list for printing
  for idx, V in enumerate(All_Data):
    pdb_id, resi_id, p1p1x, p2p2x, state =  V
#    dihe  = np.arccos(np.vdot(p1, p2)/((np.linalg.norm(p1)*(np.linalg.norm(p2)))))
#    print "Mod Dihe {0} -- {1}".format(pdb_id, dihe)

    key = 'REF'
    if idx > 0: key = 'VEC'

    if p1p1x is None:
      fo.write('<{0}> {1:6} | {2:5} |  None  |  None  | {3}\n'.format(
                key, pdb_id, resi_id, state ))
    else:
      fo.write('<{0}> {1:6} | {2:5} | {3:6.3f} | {4:6.3f} | {5}\n'.format( 
                key, pdb_id, resi_id, p1p1x, p2p2x, state ))

  fo.close()


##########################################################################
##
def DFGState( p1p1x, p2p2x ):

  ## Model PDB has same DFG- config as template DFG-in:     'in'
  ## Model PDB has opposite DFG- config as template DFG-in: 'out'
  ## Model PDB has undefined DFG- config:                   'random'
  if p1p1x is None or p2p2x is None:
    return 'missing DFG'
  elif p1p1x > -0.005 and p2p2x > 0.00:
    return 'in'
  elif p1p1x < -0.125 and p2p2x < -0.05:
    return 'out-1'
  elif p1p1x > -0.125 and p1p1x < -0.0005 and p2p2x < -0.05:
    return 'out-2'
  elif p1p1x > -0.0005 and p1p1x < 0.005 and p2p2x < 0.00:
    return 'F-flip'
  else:
    return 'random'


##########################################################################
##
def DFGTorsions( Input ):
  # Input_Coords = [pdb_name, H_Coords, N_Coords, C_Coords]
  #     x_Coords = [resname, resid, bb_coords, ca_coord, cg_coord]  
  pdb_name, Pre_Coords = Input[0], Input[3]

  # reformat the data array
  CA_Coords = np.asarray(zip(*Pre_Coords)[3])
  CG_Coords = np.asarray(zip(*Pre_Coords)[4])
   
  center = ArrayCent(len(CA_Coords))
  res_id = AA(Pre_Coords[center][0])+str(Pre_Coords[center][1])

  # Check number of residue collected for DFG-motif. If D+1 residue is not
  # collected (only D's N,CA,C atoms, no D+1's N,CA,C atoms), report and skip
  if len(Pre_Coords) < 3:
    print('  # DFG Warning: Missing D+1 residue for measurement: '+pdb_name)
    p1, p2 = None, None
  else:
    ## Take Asp 'D' and Phe 'D+1' from DFG to measure
    ## r1 = Asp 'CG', r2 = Asp 'CA'
    ## r3 = Phe 'CA', r4 = Phe 'CG'
    p1, p2 = CalculateVector( CG_Coords[center],   CA_Coords[center],
                              CA_Coords[center+1], CG_Coords[center+1],
                              pdb_name )
  
  return [ pdb_name, res_id, p1, p2 ]


##########################################################################
## Take in coordinates, calculate vectors among the coords, generate
## Cross-Products of the pairs
## Asp-CG (r1), Asp-CA (r2), Phe-CA (r3), Phe-CG (r4)
def CalculateVector(r1, r2, r3, r4, pdb_name):
  try:
    r21 = r1-r2   # (AspCG-AspCA)
  except TypeError:
    print('  # DFG Warning: missing D side chain for AspCG-AspCA: '+pdb_name)
    return None, None
  r23 = r3-r2   # (AspCA-PheCA)
  r32 = r2-r3   # (PheCA-AspCA)
  try:
    r34 = r4-r3   # (PheCG-PheCA)
  except TypeError:
    print('  # DFG Warning: missing D+1 side chain for PheCG-PheCA: '+pdb_name)
    return None, None

  p1 = np.cross(r21,r23)/(VecMag(r21)*VecMag(r23))
  p2 = np.cross(r34,r32)/(VecMag(r34)*VecMag(r32))
  return p1, p2


###########################################################################
## Extract the Phi/Psi torsional angles of the residues from BioPython
def Phi_Psi(chain_obj):
  PP_List = []
  for chain in chain_obj:
    polypep = PPBuilder().build_peptides(chain)
    for poly in polypep:
      phi_psi = poly.get_phi_psi_list()
      for pp in phi_psi:
        Set = []
        for num in list(pp):
          if num is not None:
            Set.append(np.rint(np.degrees(num)).astype(int))
          else:
            Set.append(0)
        PP_List.append(Set)
  return PP_List


###########################################################################
##
##  Peter M.U. Ung @ MSSM
##
##  v0.1    17.01.30
##
##  v1.0    17.02.02
##  v1.1    17.02.05
